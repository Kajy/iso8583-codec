package codec

import org.scalatest.Inspectors.forAll
import org.scalatest.OptionValues
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.must.Matchers.convertToAnyMustWrapper
import scodec.bits.{ ByteVector, HexStringSyntax }
import scodec.codecs.int32

class ISO8583CodecSpec extends AnyFlatSpec with OptionValues {

  val testList: List[ByteVector] = List(
    hex"0110767e44810ee7ac0110f5f4f7f3f9f5e9c4d29198e2f0f6f1f1000000000000000480000000000480013112193861000000390893132013013128010131581404000006012653f0f1f3f1f4f4f3f9f0f8f9f3f5f2f9f4f4f1f5f7d4f1f3f3f7f1f3f6f2f4f3f1f7f5f24040404040404040d7c1e4d340404040404040404040404040404040404040c2d6d9c4c5c1e4e740404040404040c6d9002f011e020c050110030273070428021210f5f3f3f2f8f997d797c38396f3f5f6f3020307020103080302f0f11502f0f5050106017328004f01020102040250030201040202060200070201080c000000000000110200120200130221140401032202033303d4d7c23409d5c3f8c5f3d34040403502993606000001420af3f3f0f0f04040404040097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0110767e44810ee3ac0110f5f4f7f3f9f593c4d9e8a2c3f5f2f1f7000000000000000525000000000525013113095961000000617329130959013127060131481610002706004441f5f0f3f1f1f3f6f1f7f3f2f9f4f9f7f2f2f0f0f0f1f2f3f4f5f6f7f8f0f0f0f9f8f0f2f0f0f1f0f8f9f9f4d7c1e8d7c1d3405cd7c1c3d2d3c9d5d240404040404040f3f5f3f1f4f3f6f9f0f0f140404040c5e2050106017328004b01020102040724030202040299060200070201080c0000000000001102001202002202082402003303d4d7c23409d4d8f3d2d4d44040403502013606000001420af2f8f0f0f54040404040097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0410f67e46810ee3ac00000000420000000110f5f4f7f3f9f5e6a9e991a3d8f5f7f7f10000000000000130000000000130001129135403610000000028761453491129261211295542030000002706012120f5f8f9f7f7f4f5f5f8f9f7f7f9f8f7f9f8f5f0f0f0f1404040404040f1f0f3f8f1f5f0f6f0f1f540404040d3c5c3d3c5d9c340c4c1c340e5d3404040404040404040d5d6e8c1d340e2e4d940e5c9d34040c6d9050106017328003e01020102040250030299040202060200070201080c0000000000001102011202002202073303d4d7c23409c8d6e3f1c1f84040403502994205f3f5f5f3f0097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0010000287611291354030000000121200000000000000000008354000000008354000000000000000000ffffffffffffffff",
    hex"0110767e44810ee7ac0110f5f4f7f3f9f585a3a2c3a7c6f3f5f5f0000000000000000190000000000190013113194061000000000153141933013127090131581404000006012900f0f1f3f1f0f0f0f0f0f1f5f3f4f1f2f6f1f8f0f0f2f3c3f2f0f4f4c4f7f8f2f4f8f7f74040404040404040d7c1e4d340c1c9e740c5d540d7e5c3c540404040404040c1c9e740c5d540d7d9d6e5c5d54040c6d9002f011e020c050110030273070427101210f5f3f3f2f8f981e7959988e4f2f3f3f0020307020103080302f0f11502f0f5050106017328004a01020102040250030201040202060200070201080c000000000000110200120200130221140401032202033303d4d7c23409c2e7c9c8e8f040404035029936060000014205f1f3f2f9f0097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0100767e44810ee7a80110f5f4f7f3f9f5a4e2e2d1e6c9f0f6f5f7000000000000000278000000000278013113192361000000000018132020013126110131940204002706012876f0f1f3f1f0f0f0f0f0f0f1f8f7f0f5f7f8f3f0f0f2f4f8f7f6c2f4f5f0f7f6f4f4f3f04040404040404040d3c140d7d6e2e3c540d3f6f4f4f3f0f04040404040404040d6d9e3c8c5e94040404040404040c6d9002f011e020c050120834693070427021210f5f3f3f2f8f9d5a8d882a9a6f1f6f5f4020307020203080302f0f11502f0f1050106017328004a01020102040250030299040202060200070201080c000000000000110200120200130221140402162202073303d4d7c23409c2e7c5c6e8f040404035029936060000014205f6f4f3f0f0097809780a01000000000000000000ffffffffffffffff",
    hex"0110767e44810ee7ac0110f5f4f7f3f9f5a4c9d688c3e2f9f5f5f9000000000000002000000000002000013113191561000000000008141915013127010131541104000006012653f0f1f3f1f3f5f0f0f0f0f0f8f3f2f7f8f1f9f0f0d4f1f7f8f5f8f8f3f2f1f7f5f6f0f44040404040404040e2d440e5c1d9c1c8c94040404040404040404040404040d3c540c2d3c1d5c340d44040404040c6d9002f011e020c050120834693070427021210f5f3f3f2f8f9e2a7a98882c5f1f8f9f7020307020203080302f0f11502f0f1050106017328004f01020102040250030201040202060200070201080c000000000000110200120200130221140402162202073303d4d7c23409e7f3c3e9f3d34040403502993606000001420af9f3f1f5f04040404040097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0110767e44810ee7ac0110f5f4f7f3f9f5c8c787e5e8d6f0f8f6f4000000000000003480000000003480013113192061000000380856141920013127010131581281002706013445f5f0f3f1f1f3f3f8f0f8f5f6f3f1f7f6f3f9f0f04040404040404040f5f2f6f5f6f7f0f4f0f1f0f6f6f5f594819587898160a5859389a9a840404040404040404040e5859389a9a860e589939381834040c6d9002b011e020c050110030273070427021210f5f3f3f2f8f998c8c684e5c7f7f0f0f5020307020103041502f0f5050106017328004a01020102040250030202040203060200070201080c000000000000110201120200140401032202082402033303d4d7c23409d6f4d9f1e7e340404035029936060000004205f7f8f1f4f0097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0110767e44810ee7ac0110f5f4f7f3f9f5e5e699a4c7a3f0f5f8f4000000000000000500000000000500013113213861000000251808142125013127020131581204002706012221f0f1f3f1f1f4f0f5f1f8f0f8f3f0f3f5f6f9f0f0f6f0f3f1f6f3f7f9f4f5f5f6f8f8f7f9f8f74040404040c18999979699a340c381a3859940e28599a58983854040c69981959286a499a340c194404040c4c5002f011e020c050120834693070427031210f5f5f5f3f7f2d999e4e49382f6f2f7f7020307020203080302f0f11502f0f1050106017328004a01020102040276030299040202060200070201080c000000000000110200120200130221140402162202033303d4d7c23409d8d6f5f2f3d240404035029936060000014205f6f0f5f4f7097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0ffffffffffffffff",
    hex"0100767e44810ee7a80110f5f4f7f3f9f5a5e385e5a5e8f3f5f1f6000000000000002520000000002520013113214561000000000006142145013126080131739904000006012916f0f1f3f1f0f0f0f0f0f0f0f6f7f7f2f6f4f5f0f0f1f5f0f1f2f3f0f1f0f5f6f1f9f3f2f340404040404040d3c540d4c1e3c1c6c1d540404040404040404040404040c6d6d5e3c3d6e4e5c5d9e3c5404040c6d9002f011e020c050110030273070427111210f5f3f3f2f8f9c4e986c794e3f1f4f9f2020307020103080302f0f11502f0f5050106017328004a01020102040250030201040202060200070201080c000000000000110200120200130221140401032202073303d4d7c23409d6e7f7d1f2d340404035029936060000014205f7f3f3f0f0097809780a01000000000000000000ffffffffffffffff",
    hex"0100767e46810ee3aa0110f5f4f7f3f9f5c684e287d8d8f3f8f5f70000000000000255500000000255500131132102610000000000031421020131271001317011030100000006012916f0f1f3f1f0f0f0f0f0f0f0f3f4f1f7f3f8f6f0f0f1f4f1f0f2f9f0f9f0f5f8f3f1f0f8f740404040404040c8e3d340c6c9e5c5e2e3c1d9e240404040404040404040d7c1d9c9e240404040404040404040c6d9050106017328004301020102040250030201040202060200070201080c0000000000001102001202002202043303d4d7c23409e5e7e5d4f2d340404035029936060000014205f7f5f0f0f8097809780a01000000000000000000080095050000008000ffffffffffffffff",
    hex"0110767e46810ee3ae0110f5f4f7f3f9f5a4c2d1a591a7f1f1f3f80000000000000150000000000150000131132334610000007425091423140131270801315542030100002706012999f5f0f3f1f1f3f7f4f2f5f0f9f2f8f5f7f1f6f0f0d4e4e3f0f0f0f0f3f8f5f1f5f0f6f54040404040404040d7c5e3d9d660d6e4c5e2e3404040404040404040404040d3c140d9d6c3c8c540e2e4d9404040c6d9050106017328004301020102040250030299040202060210070201080c0000000000001102011202302202073303d4d7c23409d2d7d3d5e8e840404035029936060100004205f8f5f0f0f0097809780a0100000000000000000014f0f0f0f2f9f7f8c3f0f0f0f0f0f0f0f0f0f0f0f0080095050000008000ffffffffffffffff"
  )

  "Test random raw" should "decode" in {
    forAll(testList) { raw =>
      val size      = int32.encode(raw.size.toInt).toOption.get
      val toProcess = size ++ raw.bits
      val result    = ISO8583Codec.CODEC.decode(toProcess)

      result.isSuccessful mustBe true

      val encoding = ISO8583Codec.CODEC.encode(result.toOption.value.value)
      encoding.isSuccessful mustBe true
      encoding.toOption.value.toHex mustBe toProcess.toHex

    }
  }

}
